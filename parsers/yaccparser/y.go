// Code generated by goyacc -o y.go m3u8.y. DO NOT EDIT.

//line m3u8.y:2
package yaccparser

import __yyfmt__ "fmt"

//line m3u8.y:2

import "time"
import "github.com/eswarantg/m3u8reader/common"
import "github.com/eswarantg/m3u8reader/parsers"

func tokenIdToTagId(token int) common.TagId {
	return common.TagId(token - tag_FIRST)
}
func attrTokenToTagId(token int) common.AttrId {
	return common.AttrId(token - token_ATTR_FIRST - 1)
}

func getHandler(l yyLexer) parsers.M3u8Handler {
	var lexer *Lexer
	var ok bool
	var obj parsers.M3u8Handler
	lexer, ok = l.(*Lexer)
	if !ok {
		panic("\nunknown lexer")
	}
	obj, ok = lexer.parseResult.(parsers.M3u8Handler)
	if !ok {
		panic("\nunknown object")
	}
	if obj == nil {
		panic("\nnil object")
	}
	return obj
}

//line m3u8.y:35
type yySymType struct {
	yys     int
	i       int
	i64     int64
	f       float64
	s       string
	r       string
	t       time.Time
	kv      keyValuePair
	val     interface{}
	kvpairs keyValuePairs
	entry   accEntry
	hdlr    parsers.M3u8Handler
}

const tag_FIRST = 57346
const tag_EXTM3U = 57347
const tag_EXT_X_VERSION = 57348
const tag_EXT_X_INDEPENDENT_SEGMENTS = 57349
const tag_EXT_X_MEDIA = 57350
const tag_EXT_X_STREAM_INF = 57351
const tag_EXT_X_TARGETDURATION = 57352
const tag_EXT_X_SERVER_CONTROL = 57353
const tag_EXT_X_PART_INF = 57354
const tag_EXT_X_MEDIA_SEQUENCE = 57355
const tag_EXT_X_SKIP = 57356
const tag_EXTINF = 57357
const tag_EXT_X_PROGRAM_DATE_TIME = 57358
const tag_EXT_X_PART = 57359
const tag_EXT_X_PRELOAD_HINT = 57360
const tag_EXT_X_RENDITION_REPORT = 57361
const tag_EXT_X_MAP = 57362
const token_COMMA = 57363
const token_SECONDLINEVALUE = 57364
const token_ATTR_FIRST = 57365
const token_ATTR_BANDWIDTH = 57366
const token_ATTR_AVERAGE_BANDWIDTH = 57367
const token_ATTR_RESOLUTION = 57368
const token_ATTR_FRAME_RATE = 57369
const token_ATTR_CODECS = 57370
const token_ATTR_AUDIO = 57371
const token_ATTR_TYPE = 57372
const token_ATTR_GROUP_ID = 57373
const token_ATTR_NAME = 57374
const token_ATTR_DEFAULT = 57375
const token_ATTR_AUTOSELECT = 57376
const token_ATTR_LANGUAGE = 57377
const token_ATTR_CHANNELS = 57378
const token_ATTR_URI = 57379
const token_ATTR_CAN_BLOCK_RELOAD = 57380
const token_ATTR_CAN_SKIP_UNTIL = 57381
const token_ATTR_PART_HOLD_BACK = 57382
const token_ATTR_PART_TARGET = 57383
const token_ATTR_SKIPPED_SEGMENTS = 57384
const token_ATTR_DURATION = 57385
const token_ATTR_INDEPENDENT = 57386
const token_ATTR_LAST_MSN = 57387
const token_ATTR_LAST_PART = 57388
const token_ATTRKEY = 57389
const token_INTEGERVAL = 57390
const token_FLOATVAL = 57391
const token_STRINGVAL = 57392
const token_RESOLUTIONVAL = 57393
const token_TIMEVAL = 57394

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tag_FIRST",
	"tag_EXTM3U",
	"tag_EXT_X_VERSION",
	"tag_EXT_X_INDEPENDENT_SEGMENTS",
	"tag_EXT_X_MEDIA",
	"tag_EXT_X_STREAM_INF",
	"tag_EXT_X_TARGETDURATION",
	"tag_EXT_X_SERVER_CONTROL",
	"tag_EXT_X_PART_INF",
	"tag_EXT_X_MEDIA_SEQUENCE",
	"tag_EXT_X_SKIP",
	"tag_EXTINF",
	"tag_EXT_X_PROGRAM_DATE_TIME",
	"tag_EXT_X_PART",
	"tag_EXT_X_PRELOAD_HINT",
	"tag_EXT_X_RENDITION_REPORT",
	"tag_EXT_X_MAP",
	"token_COMMA",
	"token_SECONDLINEVALUE",
	"token_ATTR_FIRST",
	"token_ATTR_BANDWIDTH",
	"token_ATTR_AVERAGE_BANDWIDTH",
	"token_ATTR_RESOLUTION",
	"token_ATTR_FRAME_RATE",
	"token_ATTR_CODECS",
	"token_ATTR_AUDIO",
	"token_ATTR_TYPE",
	"token_ATTR_GROUP_ID",
	"token_ATTR_NAME",
	"token_ATTR_DEFAULT",
	"token_ATTR_AUTOSELECT",
	"token_ATTR_LANGUAGE",
	"token_ATTR_CHANNELS",
	"token_ATTR_URI",
	"token_ATTR_CAN_BLOCK_RELOAD",
	"token_ATTR_CAN_SKIP_UNTIL",
	"token_ATTR_PART_HOLD_BACK",
	"token_ATTR_PART_TARGET",
	"token_ATTR_SKIPPED_SEGMENTS",
	"token_ATTR_DURATION",
	"token_ATTR_INDEPENDENT",
	"token_ATTR_LAST_MSN",
	"token_ATTR_LAST_PART",
	"token_ATTRKEY",
	"token_INTEGERVAL",
	"token_FLOATVAL",
	"token_STRINGVAL",
	"token_RESOLUTIONVAL",
	"token_TIMEVAL",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line m3u8.y:225

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 89

var yyAct = [...]int{
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 25, 23, 65, 66, 67, 68, 69,
	57, 56, 55, 53, 50, 21, 4, 5, 7, 8,
	6, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 19, 22, 64, 63, 62, 75, 74, 63, 72,
	71, 49, 3, 51, 52, 20, 54, 1, 2, 58,
	59, 60, 61, 24, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 73,
}

var yyPact = [...]int{
	31, -1000, 31, -1000, -1000, -13, -24, -1000, -24, -14,
	-24, -24, -15, -24, -17, -22, -24, -24, -24, -24,
	-1000, -1000, 33, -1000, -23, -23, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37,
	-1000, 37, 37, -1000, 37, 39, 38, -1000, 37, 37,
	37, 37, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35, 34, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 73, 53, 24, 52, 62, 68, 67,
}

var yyR1 = [...]int{
	0, 7, 6, 6, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 4, 4, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 4, 4, 2, 2, 2, 2,
	2, 1, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -7, -6, -5, 5, 6, 9, 7, 8, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	-5, 48, -4, -3, -1, 47, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, -4,
	48, -4, -4, 48, -4, 49, 48, 52, -4, -4,
	-4, -4, 22, 21, -2, 48, 49, 50, 51, 52,
	-2, 21, 21, -3, 22, 22,
}

var yyDef = [...]int{
	0, -2, 1, 2, 4, 0, 0, 7, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3, 5, 0, 21, 0, 0, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 8,
	9, 10, 11, 12, 13, 0, 0, 16, 17, 18,
	19, 20, 6, 0, 23, 48, 49, 50, 51, 52,
	24, 0, 0, 22, 14, 15,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:169
		{
			if yyVAL.hdlr == nil {
				yyVAL.hdlr = getHandler(yylex)
			}
			yyVAL.hdlr.PostRecord(yyDollar[1].entry.tag, yyDollar[1].entry.kvs)
			yyDollar[1].entry.clear("ENTRY1")
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:170
		{
			if yyVAL.hdlr == nil {
				yyVAL.hdlr = getHandler(yylex)
			}
			yyVAL.hdlr.PostRecord(yyDollar[2].entry.tag, yyDollar[2].entry.kvs)
			yyDollar[2].entry.clear("ENTRY2")
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:172
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:173
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXT_X_VERSION", common.INTUnknownAttr, yyDollar[2].i64)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line m3u8.y:174
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_STREAM_INF_1", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_STREAM_INF_1")
			yyVAL.entry.storeKVDebug("EXT_X_STREAM_INF_2", common.INTUnknownAttr, yyDollar[3].s)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:175
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:176
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_MEDIA", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_MEDIA")
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:177
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXT_X_TARGETDURATION", common.INTUnknownAttr, yyDollar[2].i64)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:178
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_SERVER_CONTROL", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_SERVER_CONTROL")
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:179
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_PART_INF", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_PART_INF")
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:180
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXT_X_MEDIA_SEQUENCE", common.INTUnknownAttr, yyDollar[2].i64)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:181
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_SKIP", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_SKIP")
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line m3u8.y:182
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXTINF_FL_1", common.INTUnknownAttr, yyDollar[2].f)
			yyVAL.entry.storeKVDebug("EXTINF_FL_2", common.M3U8Uri, yyDollar[4].s)
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line m3u8.y:183
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXTINF_INT_1", common.INTUnknownAttr, float64(yyDollar[2].i64))
			yyVAL.entry.storeKVDebug("EXTINF_INT_2", common.M3U8Uri, yyDollar[4].s)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:184
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.storeKVDebug("EXT_X_PROGRAM_DATE_TIME", common.INTUnknownAttr, yyDollar[2].t)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:185
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_PART", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_PART")
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:186
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_PRELOAD_HINT", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_PRELOAD_HINT")
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:187
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_RENDITION_REPORT", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_RENDITION_REPORT")
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:188
		{
			yyVAL.entry.tag = tokenIdToTagId(yyDollar[1].i)
			yyVAL.entry.assignKVPS("EXT_X_MAP", yyDollar[2].kvpairs)
			yyDollar[2].kvpairs.clear("EXT_X_MAP")
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:190
		{
			yyVAL.kvpairs.storeKVDebug("ATTRANDVAL_1", yyDollar[1].kv.k, yyDollar[1].kv.v)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line m3u8.y:191
		{
			yyDollar[1].kvpairs.storeKVDebug("ATTRANDVAL_2", yyDollar[3].kv.k, yyDollar[3].kv.v)
			yyVAL.kvpairs = yyDollar[1].kvpairs
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:193
		{
			yyVAL.kv.k = attrTokenToTagId(yyDollar[1].i)
			yyVAL.kv.v = yyDollar[2].val
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line m3u8.y:194
		{
			yyVAL.kv.k = common.AttrToAttrId[yyDollar[1].s]
			yyVAL.kv.v = yyDollar[2].val
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:196
		{
			yyVAL.i = yyDollar[1].i
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:197
		{
			yyVAL.i = yyDollar[1].i
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:198
		{
			yyVAL.i = yyDollar[1].i
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:199
		{
			yyVAL.i = yyDollar[1].i
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:200
		{
			yyVAL.i = yyDollar[1].i
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:201
		{
			yyVAL.i = yyDollar[1].i
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:202
		{
			yyVAL.i = yyDollar[1].i
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:203
		{
			yyVAL.i = yyDollar[1].i
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:204
		{
			yyVAL.i = yyDollar[1].i
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:205
		{
			yyVAL.i = yyDollar[1].i
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:206
		{
			yyVAL.i = yyDollar[1].i
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:207
		{
			yyVAL.i = yyDollar[1].i
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:208
		{
			yyVAL.i = yyDollar[1].i
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:209
		{
			yyVAL.i = yyDollar[1].i
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:210
		{
			yyVAL.i = yyDollar[1].i
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:211
		{
			yyVAL.i = yyDollar[1].i
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:212
		{
			yyVAL.i = yyDollar[1].i
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:213
		{
			yyVAL.i = yyDollar[1].i
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:214
		{
			yyVAL.i = yyDollar[1].i
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:215
		{
			yyVAL.i = yyDollar[1].i
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:216
		{
			yyVAL.i = yyDollar[1].i
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:217
		{
			yyVAL.i = yyDollar[1].i
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:218
		{
			yyVAL.i = yyDollar[1].i
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:220
		{
			yyVAL.val = yyDollar[1].i64
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:221
		{
			yyVAL.val = yyDollar[1].f
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:222
		{
			yyVAL.val = yyDollar[1].s
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:223
		{
			yyVAL.val = yyDollar[1].r
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line m3u8.y:224
		{
			yyVAL.val = yyDollar[1].t
		}
	}
	goto yystack /* stack new state and value */
}
